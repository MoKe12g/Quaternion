name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]
  create:

defaults:
  run:
    shell: bash

jobs:
  CI:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-18.04 ]
        compiler: [ GCC, Clang ]
        artefact: [ '' ] # Generate a package for distribution (e.g., dmg)
        qt-version: [ '5.9.9' ]
        composition: [ static, dynamic ]
        exclude:
        - compiler: Clang
          composition: static # Replace with all-in-one (see below)
        include:
        - os: ubuntu-18.04
          compiler: Clang
          artefact: appimage
          qt-version: '5.14.2'
          composition: all-in-one
        - os: macos-10.15
          compiler: Clang
          artefact: dmg
          qt-version: '5.14.2'
          composition: all-in-one

    env:
      DEPLOY_VERBOSITY: 1
      QTKEYCHAIN_REF: v0.12.0
      QUOTIENT_REF: 0.6.x

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: ${{ matrix.composition == 'all-in-one' }}

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}/Qt
        key: ${{ runner.os }}-Qt${{ matrix.qt-version }}-cache

    - name: Install Qt
      uses: jurplel/install-qt-action@v2.11.1
      with:
        version: ${{ matrix.qt-version }}
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Install Ninja and other deps (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: |
        if [ "${{ matrix.artefact }}" == "appimage" ]; then
          EXTRA_DEPS="appstream libgstreamer-plugins-base1.0.0"
        fi
        sudo apt-get -qq install ninja-build appstream-util $EXTRA_DEPS

    - name: Install Ninja (macOS)
      if: contains(matrix.os, 'macos')
      run: brew install ninja

    - name: Setup build environment
      run: |
        if [ "${{ matrix.compiler }}" == "GCC" ]; then
          echo "CC=gcc" >>$GITHUB_ENV
          echo "CXX=g++" >>$GITHUB_ENV
        else
          echo "CC=clang" >>$GITHUB_ENV
          echo "CXX=clang++" >>$GITHUB_ENV
        fi
        if [ "${{ runner.os }}" == "macOS" ]; then
          echo "PATH=/usr/local/opt/qt/bin:$PATH" >>$GITHUB_ENV
        fi
        echo "DESTDIR=${{ runner.workspace }}" >>$GITHUB_ENV
        echo "CMAKE_ARGS=-GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
              -DCMAKE_INSTALL_PREFIX=/usr \
              -DCMAKE_PREFIX_PATH=${{ runner.workspace }}/usr \
              -DBUILD_SHARED_LIBS=${{ matrix.composition == 'dynamic' }}" \
            >>$GITHUB_ENV
        cmake -E make_directory ${{ runner.workspace }}/build
        
    - name: Configure deployment environment
      if: matrix.artefact
      run: |
        if grep -q 'refs/tags' <<<'${{ github.ref }}'; then
            echo "VERSION=$(git describe --tags)" >>$GITHUB_ENV
        elif grep -q 'refs/heads' <<<'${{ github.ref }}'; then
            echo "VERSION=ci${{ github.run_number }}-$(git describe --all --contains)" >>$GITHUB_ENV
        else
            echo "VERSION=ci${{ github.run_number }}-$(git rev-parse --short HEAD)" >>$GITHUB_ENV
        fi
        mkdir package

    - name: Get, build and install QtKeychain
      run: |
        git clone --depth=1 -b $QTKEYCHAIN_REF https://github.com/frankosterfeld/qtkeychain
        cd qtkeychain
        cmake -S . -B build $CMAKE_ARGS -DQTKEYCHAIN_STATIC=${{ matrix.composition != 'dynamic' }}
        cmake --build build --target install

    - name: Get, build and install libQuotient
      if: matrix.composition != 'all-in-one'
      run: |
        git clone --depth=1 -b $QUOTIENT_REF https://github.com/quotient-im/libQuotient
        cd libQuotient
        cmake -S . -B build $CMAKE_ARGS
        cmake --build build --target install

    - name: Configure Quaternion
      run: cmake -LA -S $GITHUB_WORKSPACE -B build $CMAKE_ARGS -DDEPLOY_VERBOSITY=$DEPLOY_VERBOSITY

    - name: Build Quaternion
      run: cmake --build build --target quaternion

    - name: Install and validate Quaternion (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        cmake --build build --target install
        appstream-util validate $DESTDIR/usr/share/metainfo/*.appdata.xml

    - name: Make image (macOS)
      if: contains(matrix.os, 'macos') && matrix.artefact
      run: |
        cmake --build build --target image
        mv build/quaternion.dmg package/quaternion-$VERSION.dmg

    - name: Make AppImage (Linux)
      if: contains(matrix.os, 'ubuntu') && matrix.artefact
      env:
        QML_SOURCES_PATHS: ${{ github.workspace }}/client/qml
      run: |
        for f in linuxdeploy linuxdeploy-plugin-qt; do
            wget -c -nv --directory-prefix=linuxdeploy \
                https://github.com/linuxdeploy/$f/releases/download/continuous/$f-x86_64.AppImage
            chmod +x $f-x86_64.AppImage
        done
        LD_LIBRARY_PATH=$Qt5_DIR/lib QMAKE=$Qt5_DIR/bin/qmake \
            OUTPUT=package/quaternion-$VERSION.AppImage \
            linuxdeploy/linuxdeploy-x86_64.AppImage --appdir $DESTDIR --plugin qt --output appimage
            
    - name: Upload artefacts to Bintray
      if: matrix.artefact != '' && !startsWith(github.ref, 'refs/tags') # Tags will go to GitHub Releases
      uses: reznikmm/upload-bintray-action@v4
      with:
        username: kitsune
        subject: quotient
        repository: ci
        package: Quaternion
        version: ci${{ github.run_number }}
        sourcePath: 'package/quaternion-*'
        override: 1
        apiKey: ${{ secrets.BINTRAY_API_KEY }}
