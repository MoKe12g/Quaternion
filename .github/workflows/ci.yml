name: CI

on:
  push:
  pull_request:
    types: [opened, reopened]
  create:

defaults:
  run:
    shell: bash

jobs:
  CI:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-18.04, macos-10.15]
        compiler: [ GCC, Clang ]
        linkage: [ static, dynamic ]
        all-in-one: [ '', 'all-in-one' ]
        exclude:
        - os: macos-10.15
          compiler: GCC
        - os: macos-10.15
          linkage: dynamic
        - linkage: dynamic # Only build all-in-one in static configuration
          all-in-one: 'all-in-one'

    env:
      BUILD_SHARED_LIBS: ${{ matrix.dynamic }}
      DEPLOY_VERBOSITY: 1

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: ${{ matrix.all-in-one != '' }}

    - name: Cache Qt (Linux)
      if: ${{ !contains(matrix.os, 'macos') }}
      id: cache-qt
      uses: actions/cache@v2
      with:
        path: ${{ runner.workspace }}/Qt
        key: ${{ runner.os }}-QtCache

    - name: Install Qt (Linux)
      if: ${{ !contains(matrix.os, 'macos') }}
      uses: jurplel/install-qt-action@v2.11.1
      with:
        version: '5.9.9'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Install other dependencies (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: sudo apt-get install ninja-build appstream-util

    - name: Install Qt and QtKeychain (macOS)
      if: contains(matrix.os, 'macos')
      run: brew install ninja qt5 qtkeychain

    - name: Setup build environment
      run: |
        if [ "${{ matrix.compiler }}" == "GCC" ]; then
          echo "CC=gcc" >>$GITHUB_ENV
          echo "CXX=g++" >>$GITHUB_ENV
        else
          echo "CC=clang" >>$GITHUB_ENV
          echo "CXX=clang++" >>$GITHUB_ENV
        fi
        if [ "${{ runner.os }}" == "macOS" ]; then
          echo "PATH=/usr/local/opt/qt/bin:$PATH" >>$GITHUB_ENV
        fi
        echo "DESTDIR=${{ runner.workspace }}" >>$GITHUB_ENV
        echo "CMAKE_ARGS=-GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_PREFIX_PATH=${{ runner.workspace }}/usr" >>$GITHUB_ENV
        cmake -E make_directory ${{ runner.workspace }}/build

    - name: Get, build and install QtKeychain (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        git clone -b v0.12.0 https://github.com/frankosterfeld/qtkeychain
        cd qtkeychain
        cmake -S . -B build $CMAKE_ARGS
        cmake --build build --target install

    - name: Get, build and install libQuotient
      if: '!matrix.all-in-one'
      run: |
        git clone -b 0.6.x https://github.com/quotient-im/libQuotient
        cd libQuotient
        cmake -S . -B build $CMAKE_ARGS
        cmake --build build --target install

    - name: Configure Quaternion
      run: cmake -S $GITHUB_WORKSPACE -B build $CMAKE_ARGS -DDEPLOY_VERBOSITY=$DEPLOY_VERBOSITY

    - name: Build Quaternion
      run: cmake --build build --target quaternion

    - name: Install and validate Quaternion (Linux)
      if: ${{ contains(matrix.os, 'ubuntu') }}
      run: |
        cmake --build build --target install
        appstream-util validate $DESTDIR/usr/share/metainfo/*.appdata.xml

    - name: Make image (macOS)
      if: contains(matrix.os, 'macos')
      run: cmake --build build --target image

    - name: Make AppImage (Linux, all-in-one)
      if: contains(matrix.os, 'ubuntu') && matrix.all-in-one != ''
      env:
        QML_SOURCES_PATHS: ${{ github.workspace }}/client/qml
      run: |
        mkdir linuxdeploy && cd linuxdeploy
        for f in linuxdeploy linuxdeploy-plugin-qt; do
          wget https://github.com/linuxdeploy/$f/releases/download/continuous/$f-x86_64.AppImage
          chmod +x $f-x86_64.AppImage
        done
        LD_LIBRARY_PATH=$QT5_DIR/lib QMAKE=$QT5_DIR/bin/qmake ./linuxdeploy-x86_64.AppImage --appdir $DESTDIR --plugin qt --output AppImage
